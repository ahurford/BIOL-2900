[["index.html", "BIOL 2900 - Principles of Evolution and Systematics 1 Getting Started with R", " BIOL 2900 - Principles of Evolution and Systematics Youlian Tzenov, Johanna Bosch, Amy Hurford 2023-03-07 1 Getting Started with R Please refer to the quantitative guide if you are new to using R: https://ahurford.github.io/quant-guide-all-courses/index.html The quant guide will also provide you with useful tips and tutorials for a lot of the labs, and will be useful to have open while you are working through these assignments. "],["lab-2---making-an-rmarkdown-file.html", "2 Lab 2 - Making an RMarkdown File", " 2 Lab 2 - Making an RMarkdown File [Page currently in progress] "],["lab-4---natural-selection.html", "3 Lab 4 - Natural Selection 3.1 Introduction 3.2 Plotting Parent Population Beak Depth 3.3 Plotting the Entire Population’s Beak Depth 3.4 Plotting the Survivor Population’s Beak Depth 3.5 Statistical Analysis", " 3 Lab 4 - Natural Selection 3.1 Introduction Description of lab During this week’s lab, students will analyze and interpret medium ground finch beak depth empirical data for evidence of natural selection on the island of Daphne Major as a result of limited food supply due to drought. You will gain knowledge/experience writing mathematical hypotheses, analyzing empirical sample data using R Studio and interpreting it to identify the supported hypotheses. In this R tutorial, you will generate 3 bargraphs 1 - Counts for parent beak depths 2 - Counts for entire population beak depths 3 - Counts for survivor beak depth And in the last step, you will run a statistical analysis on your data. Getting Started Open R Studio and set your working directory use the setwd(” “) command (as in Lab 2) Download the l4_dataset.csv file from brightspace and save it to your working directory folder. Read the l4_dataset.csv into R Studio using the ‘read.csv’ command (as in Lab 2) require(&quot;tidyverse&quot;) ## Loading required package: tidyverse ## ── Attaching core tidyverse packages ────────── ## ✔ dplyr 1.1.0 ✔ readr 2.1.4 ## ✔ forcats 1.0.0 ✔ stringr 1.5.0 ## ✔ ggplot2 3.4.1 ✔ tibble 3.1.8 ## ✔ lubridate 1.9.2 ✔ tidyr 1.3.0 ## ✔ purrr 1.0.1 ## ── Conflicts ───────── tidyverse_conflicts() ── ## ✖ dplyr::filter() masks stats::filter() ## ✖ dplyr::lag() masks stats::lag() ## ℹ Use the ]8;;http://conflicted.r-lib.org/conflicted package]8;; to force all conflicts to become errors # make sure to give it the vector name &#39;l4_dataset&#39; l4_dataset &lt;- read.csv(&quot;l4_dataset.csv&quot;, header=TRUE) NOTE information on the variables can be found in the l4_metadata.txt file (on brightspace). 3.2 Plotting Parent Population Beak Depth 3.2.1 STEP 1 Split parents beak depth counts into size categories, this is ALREADY done for you. In order to generate a bargraph, the range of beak depths (in the parents_beakdepth column) must be split into SIZE categories and the number of birds in each category must be summed. The first category includes all beaks shallower (less) than 7.3 mm. The last category includes all beaks deeper (greater) than 11.29 mm. Each category in between spans 0.49 mm (ie. 7.3-7.79, 7.8-8.29, 8.3-8.79, … 10.8-11.29) To accomplish this, the C &lt;- X$CN command is used to create a vector for each category and the sum() function counts the number of birds that have beaks in that category. # the C &lt;- X$CN command is described above # the sum() function allows you to count values less than/greater than a certain depth or the values that fall within a certain range # the command below counts all beak depths less than 7.3 (from the parents_beakdepth column in the l4_dataset) and assigns them to the &quot;pb_less7.3&quot; vector pb_less7.3 &lt;-sum(l4_dataset$parents_beakdepth &lt; 7.3, na.rm=TRUE) # the command below counts all beak depths greater than 11.3 (from the parents_beakdepth column in the l4_dataset) and assigns them to the &quot;pb_greater11.29&quot; vector pb_greater11.29 &lt;-sum(l4_dataset$parents_beakdepth &gt;= 11.3, na.rm=TRUE) # the commands below count all beak depths within the specific range (from the parents_beakdepth column in the l4_dataset) and assigns them to a vector pb_7.3_7.79 &lt;-sum(l4_dataset$parents_beakdepth &gt;= 7.3 &amp; l4_dataset$parents_beakdepth &lt; 7.8, na.rm=TRUE) pb_7.8_8.29 &lt;-sum(l4_dataset$parents_beakdepth &gt;= 7.8 &amp; l4_dataset$parents_beakdepth &lt; 8.3, na.rm=TRUE) pb_8.3_8.79 &lt;-sum(l4_dataset$parents_beakdepth &gt;= 8.3 &amp; l4_dataset$parents_beakdepth &lt; 8.8, na.rm=TRUE) pb_8.8_9.29 &lt;-sum(l4_dataset$parents_beakdepth &gt;= 8.8 &amp; l4_dataset$parents_beakdepth &lt; 9.3, na.rm=TRUE) pb_9.3_9.79 &lt;-sum(l4_dataset$parents_beakdepth &gt;= 9.3 &amp; l4_dataset$parents_beakdepth &lt; 9.8, na.rm=TRUE) pb_9.8_10.29 &lt;-sum(l4_dataset$parents_beakdepth &gt;= 9.8 &amp; l4_dataset$parents_beakdepth &lt; 10.3, na.rm=TRUE) pb_10.3_10.79 &lt;-sum(l4_dataset$parents_beakdepth &gt;= 10.3 &amp; l4_dataset$parents_beakdepth &lt; 10.8, na.rm=TRUE) pb_10.8_11.29 &lt;-sum(l4_dataset$parents_beakdepth &gt;= 10.8 &amp; l4_dataset$parents_beakdepth &lt; 11.3, na.rm=TRUE) 3.2.2 STEP 2 Put all parents counts for each category into a single vector called ‘X1’. As there are counts in several categories, we will combine them all using the c(...)function, this is ALREADY done for you. # x &lt;- c(...) X1 &lt;- c(pb_less7.3, pb_7.3_7.79, pb_7.8_8.29, pb_8.3_8.79, pb_8.8_9.29, pb_9.3_9.79, pb_9.8_10.29, pb_10.3_10.79, pb_10.8_11.29, pb_greater11.29) # to check the data contained in the vector, simply type the vector name and run the command X1 3.2.3 STEP 3 Make labels for each category using the ’names.arg=c(” “)’ command, this is ALREADY done for you names.arg=c(&quot;&lt; 7.3 mm&quot;, &quot;7.3 - 7.79 mm&quot;, &quot;7.8 - 8.29 mm&quot;, &quot;8.3 - 8.79 mm&quot;, &quot;8.8 - 9.29 mm&quot;, &quot;9.3 - 9.79 mm&quot;, &quot;9.8 - 10.29 mm&quot;, &quot;10.3 - 10.79 mm&quot;, &quot;10.8 - 11.29 mm&quot;, &quot;&gt; 11.29 mm&quot;) 3.2.4 STEP 4 Make a graph for parents beak depth distribution, this is ALREADY done for you Here, we use the barplot() function to generate the figure NOTE Once the final figure is made, use the Export button above your figure to save as an image # first, use the par() function with the &#39;mar=&#39; argument to adjust the margins of your plot par(mar=c(10,5,3,1)) # use the &#39;X1&#39; vector to input the values (beak depth counts for each category) # use the &#39;names.arg=c(&quot;&quot;)&#39; function (written in step 3 above) to add category labels # use the &#39;las = 2&#39; argument to arrange your x-axis category labels vertically, # use the &#39;ylab=&#39; argument to set a y-axis title named &quot;Count&quot; # use the &#39;ylim=c()&#39; argument to set a lower and upper limit for your y axis values barplot(X1, names.arg=c(&quot;&lt; 7.3 mm&quot;, &quot;7.3 - 7.79 mm&quot;, &quot;7.8 - 8.29 mm&quot;, &quot;8.3 - 8.79 mm&quot;, &quot;8.8 - 9.29 mm&quot;, &quot;9.3 - 9.79 mm&quot;, &quot;9.8 - 10.29 mm&quot;, &quot;10.3 - 10.79 mm&quot;, &quot;10.8 - 11.29 mm&quot;, &quot;&gt; 11.29 mm&quot;), las = 2, ylab=&quot;Count&quot;, ylim = c(0,17)) # to add an x-axis label (&quot;Parent beak depth categories&quot;), us the title function title(xlab=&quot;Parent beak depth categories&quot;, line = 8) # the &#39;line = 8&#39; argument sets the position of the title below the category labels HINT if your figure has axis labels that are being cut off on your screen, try adjusting the margins with the par(mar()) command above 3.3 Plotting the Entire Population’s Beak Depth NOTE some of this code is only PARTIALLY written for you, refer to the steps above 3.3.1 STEP 5 Split entirepopn beak depth counts into size categories, this is ALREADY done for you eb_less7.3 &lt;-sum(l4_dataset$entirepopn_beakdepth &lt; 7.3, na.rm=TRUE) eb_7.3_7.79 &lt;-sum(l4_dataset$entirepopn_beakdepth &gt;= 7.3 &amp; l4_dataset$entirepopn_beakdepth &lt; 7.8, na.rm=TRUE) eb_7.8_8.29 &lt;-sum(l4_dataset$entirepopn_beakdepth &gt;= 7.8 &amp; l4_dataset$entirepopn_beakdepth &lt; 8.3, na.rm=TRUE) eb_8.3_8.79 &lt;-sum(l4_dataset$entirepopn_beakdepth &gt;= 8.3 &amp; l4_dataset$entirepopn_beakdepth &lt; 8.8, na.rm=TRUE) eb_8.8_9.29 &lt;-sum(l4_dataset$entirepopn_beakdepth &gt;= 8.8 &amp; l4_dataset$entirepopn_beakdepth &lt; 9.3, na.rm=TRUE) eb_9.3_9.79 &lt;-sum(l4_dataset$entirepopn_beakdepth &gt;= 9.3 &amp; l4_dataset$entirepopn_beakdepth &lt; 9.8, na.rm=TRUE) eb_9.8_10.29 &lt;-sum(l4_dataset$entirepopn_beakdepth &gt;= 9.8 &amp; l4_dataset$entirepopn_beakdepth &lt; 10.3, na.rm=TRUE) eb_10.3_10.79 &lt;-sum(l4_dataset$entirepopn_beakdepth &gt;= 10.3 &amp; l4_dataset$entirepopn_beakdepth &lt; 10.8, na.rm=TRUE) eb_10.8_11.29 &lt;-sum(l4_dataset$entirepopn_beakdepth &gt;= 10.8 &amp; l4_dataset$entirepopn_beakdepth &lt; 11.3, na.rm=TRUE) eb_greater11.29 &lt;-sum(l4_dataset$entirepopn_beakdepth &gt;= 11.3, na.rm=TRUE) 3.3.2 STEP 6 Put all entirepopn counts for each category into a vector called ‘X2’. This command has been started for you, finish the last three (3) categories (SEE STEP 2) by replacing the &#39;???&#39; with the appropriate fields X2 &lt;- c(eb_less7.3, eb_7.3_7.79, eb_7.8_8.29, eb_8.3_8.79, eb_8.8_9.29, eb_9.3_9.79, eb_9.8_10.29, ???, ???, ???) 3.3.3 STEP 7 Now, make a graph for entirepopn beaksize distribution Use the same command as for the previous graph, this time using X2 instead of X1 (SEE STEP 3) The partial code is below. Be sure to replace the ‘???’ with the appropriate fields NOTE Once your figure is made, use the Export button above your figure to save as an image par(mar=c(10,5,3,1)) barplot(???, names.arg=c(&quot;&lt; 7.3 mm&quot;, &quot;7.3 - 7.79 mm&quot;, &quot;7.8 - 8.29 mm&quot;, &quot;8.3 - 8.79 mm&quot;, &quot;8.8 - 9.29 mm&quot;, &quot;9.3 - 9.79 mm&quot;, &quot;9.8 - 10.29 mm&quot;, &quot;10.3 - 10.79 mm&quot;, &quot;10.8 - 11.29 mm&quot;, &quot;&gt; 11.29 mm&quot;), las = 2, ylab=&quot;???&quot;, ylim = c(0,160)) title(xlab=&quot;???&quot;, line = 8) 3.4 Plotting the Survivor Population’s Beak Depth NOTE some of this code is only PARTIALLY written for you, refer to the steps above 3.4.1 STEP 8 Create a new dataset (from the l4_dataset), which separates out the survivors (and their beak depths) from the entirepopn To accomplish this, the subset function subset(x, ...) is used to select specific beak depths from one column based on the value in another column. We will extract the surviving finch beak depths from the entirepopn column based on the value of ‘1’ in the survivor column. These values will be put into a new dataset. NOTE we call this new dataset ‘survivors’ # &#39;survivors&#39; is the name of the new dataset # subset(x, ...) function selects certain values based on specified parameters # l4_dataset is where the values are obtained # survivors == &#39;1&#39; allows us to keep only finiches that survived survivors &lt;- subset(l4_dataset, (survivors == &#39;1&#39;)) Take a look at this new dataset by clicking on the survivors dataset (to the right, under the Environment tab) NOTE This data contains beak depths for every individual from the entire population that SURVIVED. You will graph the survivor data in the entirepopn_beakdepth column of the survivor dataset 3.4.2 STEP 9 Split entirepopn beak depth counts from the survivors dataset into categories, here the first 4 categories are ALREADY written for you. This command has been started for you, finish the last six (6) categories yourself (SEE STEP 5) sb_less7.3 &lt;- sum(survivors$entirepopn_beakdepth &lt; 7.3, na.rm=TRUE) sb_7.3_7.79 &lt;-sum(survivors$entirepopn_beakdepth &gt;= 7.3 &amp; survivors$entirepopn_beakdepth &lt; 7.8, na.rm=TRUE) sb_7.8_8.29 &lt;-sum(survivors$entirepopn_beakdepth &gt;= 7.8 &amp; survivors$entirepopn_beakdepth &lt; 8.3, na.rm=TRUE) sb_8.3_8.79 &lt;-sum(survivors$entirepopn_beakdepth &gt;= 8.3 &amp; survivors$entirepopn_beakdepth &lt; 8.8, na.rm=TRUE) ??? ??? ??? 3.4.3 STEP 10 Put all the entirepopn beak depth counts for each category from the survivors dataset into a vector called ‘X3’ This command has been started for you, finish the last three (3) categories (SEE STEP 2) by replacing the &#39;???&#39; with the appropriate fields X3 &lt;- c(sb_less7.3, sb_7.3_7.79, sb_7.8_8.29, sb_8.3_8.79, sb_8.8_9.29, sb_9.3_9.79, sb_9.8_10.29, ???, ???, ???) 3.4.4 STEP 11 Make a graph for the SURVIVORS of the entirepopn_beakdepth distribution NOTE make sure you replace ‘???’ with the appropriate fields (SEE STEP 4) par(mar=c(10,5,3,1)) barplot(???, names.arg=c(&quot;&lt; 7.3 mm&quot;, &quot;7.3 - 7.79 mm&quot;, &quot;7.8 - 8.29 mm&quot;, &quot;8.3 - 8.79 mm&quot;, &quot;8.8 - 9.29 mm&quot;, &quot;9.3 - 9.79 mm&quot;, &quot;9.8 - 10.29 mm&quot;, &quot;10.3 - 10.79 mm&quot;, &quot;10.8 - 11.29 mm&quot;, &quot;&gt; 11.29 mm&quot;), las = 2, ylab=&quot;???&quot;, ylim = c(0,30)) title(xlab=&quot;???&quot;, line = 8) 3.5 Statistical Analysis 3.5.1 STEP 12 Calculate mean and standard deviation of each population The mean and standard deviation commands for the parent population have ALREADY been written for you. # in this command, the &#39;na.rm=TRUE&#39; argument will ignore any NA values in the data mean(l4_dataset$parents_beakdepth, na.rm=TRUE) sd(l4_dataset$parents_beakdepth, na.rm=TRUE) Next, find the mean and standard deviation for the entirepopn_beakdepths in the l4_dataset. NOTE replace the ‘???’ with the correct arguments below. mean(???, na.rm=TRUE) sd(???, na.rm=TRUE) Lastly, find the mean and standard deviation for the entirepopn_beakdepths in the survivors dataset. mean(???, na.rm=TRUE) sd(survivors$entirepopn_beakdepth, na.rm=TRUE) 3.5.2 STEP 13 Perform t.tests on this data to determine if the means have significantly changed between populations NOTE the output of the t.test gives you several different metrics, but let’s just focus on the p-value for now 1) t.test for parents vs. entire, this is ALREADY done for you t.test(l4_dataset$parents_beakdepth, l4_dataset$entirepopn_beakdepth) 2) t.test for parents vs. survivors, this is ALREADY done for you t.test(l4_dataset$parents_beakdepth, survivors$entirepopn_beakdepth) 3) t.test for entire vs. survivors try writing this t.test() command yourself, remember to use the survivor dataset we made in STEP 9 To determine statistical significance, use the p-values you obtained from the t-tests. If the p-value is below 0.05, the datasets compared are significantly different. "],["lab-5---sexual-selection.html", "4 Lab 5 - Sexual Selection 4.1 Introduction 4.2 Getting Started 4.3 Plotting Figure 1 - Eyespots increases mates 4.4 Plotting Figure 2 - Eyespots Increases Copulations 4.5 Plotting Figure 3 - Eyespots Increases Copulations", " 4 Lab 5 - Sexual Selection 4.1 Introduction Description of lab During this week’s lab, students will analyze and interpret a variety of peacock train empirical data for evidence of sexual selection and trade-offs. Students will gain knowledge/experience writing mathematical hypotheses, analyzing empirical sample data using RStudio (specifically ggplot2,a popular R package for data visualization) and interpreting it to identify the supported hypotheses. Students will also consider a range of supplemental data to assess the validity of the sexual selection theory. In this R tutorial, you will generate 2 scatterplots and a bargraph: 1 - Relationship between peahen mates and the number of eyespots in the peacock&#39;s train. 2 - The relationship number of copulations a peacock obtains and the number of eyespots in the peacock&#39;s train 3 - Change in number of copulations for those peacocks that had eyespots removed You will also run some statistical analyses on your data. 4.2 Getting Started First, install the packages you need to use ggplot ggplot is a graphing software install.packages(&quot;tidyverse&quot;) install.packages(&quot;ggplot2&quot;) #Then, load each package library(tidyverse) library(ggplot2) Next, open R Studio and set your working directory HINT: use the setwd(” “) command (as in Lab 2) Download the l5_dataset.csv file from brightspace and save it to your working directory folder. Read the l5_dataset.csv into R Studio using the ‘read.csv’ command (as in Lab 2) # make sure to give it the vector name &#39;l5_dataset&#39; l5_dataset &lt;- read.csv(&quot;l5_dataset.csv&quot;, header=TRUE) Now load your metadata file that contains important information about your dataset NOTE: the information on the variables can be found in the l5_metadata.csv file (on brightspace). #load the metadata file and name the vector l5_metadata l5_metadata &lt;- read.csv(&quot;l5_metadata.csv&quot;) #now open both the metadata file and the l5_dataset, use: view(l5_metadata) view(l5_dataset) Each column in the l5_dataset is described in your metadata file NOTE: you can come back to this metadata file at any point to find your references, and if you need to check what each column of the l5_dataset means The view() command will only work if you loaded the ‘tidyverse’ package above Which column represents the mean change seasonal copulations of peacocks with 20 eyespots removed from trains? Which variables are your control? which are your experimental? 4.3 Plotting Figure 1 - Eyespots increases mates 4.3.1 STEP 1: Import columns as vectors, this is ALREADY done for you. f1_eyespots &lt;- l5_dataset$f1_n_eyespots f1_mates &lt;- l5_dataset$f1_n_mates f2_eyespots &lt;- l5_dataset$f2_n_eyespots f2_cop &lt;- l5_dataset$f2_n_cop f3_cont &lt;- l5_dataset$f3_cont f3_exp &lt;- l5_dataset$f3_exp 4.3.2 STEP 2: In the last lab you used the base plot functions to plot graphs, but ggplot2 creates graphs using a step-by-step process that combines independent layers. The ggplot2 package is more flexible and powerful than the base plot functions. Generate a scatterplot using ggplot2, this step is outlined and you should refer to it when you are making the scatterplots for the next steps. HINT: these steps are outlined in the Quantitative Guide (https://ahurford.github.io/quant-guide-all-courses/ggplot.html#making-scatter-plots-with-ggplot2) #Let&#39;s begin build our graphic one step at a time #first let&#39;s use the ggplot() function to specify our data frame and set our x and y variables within the aesthetic aes(). #When we run this code, it produces a blank figure with our x and y axis set because we haven’t specified the type of graphic we want. ggplot(data = l5_dataset, aes(x = f1_eyespots, y = f1_mates)) Now that we have our plot layer, let’s add the points to our scatterplot using another layer called geom_point #to add a layer in ggplot() we can use the &#39;+&#39; symbol at the end of each line, like this: ggplot(data = l5_dataset, aes(x = f1_eyespots, y = f1_mates)) + geom_point() Let’s make the graph a little easier to read: #add size and colour to your points using the &#39;size=&#39;, &#39;shape=&#39; and &#39;colour=&#39; aesthetics #we&#39;ve added the &#39;na.rm=TRUE&#39; argument to remove any NA values in the l5_dataset ggplot(data = l5_dataset, aes(x = f1_eyespots, y = f1_mates)) + geom_point(size=3, shape=17, colour=&quot;salmon&quot;, na.rm=TRUE) You can find a list of R colors here, pick one you like and replace it with the ‘salmon’ colour: http://www.stat.columbia.edu/~tzheng/files/Rcolor.pdf You can find a list of shapes to pick from here, they are represented numerically (for example, ‘17’ represents a solid triangle). Pick one you like: http://www.sthda.com/english/wiki/ggplot2-point-shapes Now that we have our main point plotted, let’s add a regression line to the scatterplot, this is ALREADY done for you: #the argument &#39;method =“lm”&#39; fits a linear model through your data #the argument &#39;se=TRUE&#39; adds a grey shaded confidence interval around the line of best fit #the &#39;level=&#39; argument specifies the level of the confidence interval to use ggplot(data = l5_dataset, aes(x = f1_eyespots, y = f1_mates)) + geom_point(size=3, shape=17, colour=&quot;salmon&quot;, na.rm=TRUE) + geom_smooth(method=lm, se=TRUE, level=0.95, na.rm=TRUE) Ggplot2 also allows you to add axis labels to your plot, let’s add a tag to the graph called “A”, and axis labels using the ‘labs()’ function #make sure you keep the &#39;na.rm=TRUE&#39; argument ggplot(data = l5_dataset, aes(x = f1_eyespots, y = f1_mates)) + geom_point(size=3, shape=17, colour=&quot;salmon&quot;, na.rm=TRUE) + geom_smooth(method=lm, se=TRUE, level=0.95, na.rm=TRUE) + labs(tag=&quot;A&quot;, x=&quot;Number of eyespots&quot;, y=&quot;Number of mates&quot;) Here, we are naming the final plot ‘a’ so we can use patchwork to put all our plots together #to make our graph look nicer, we can also add themes #choose to add either the &#39;theme_dark()&#39; or &#39;theme_light&#39; for this graph #use the &#39;base_size=&#39; argument to change the size of the labels on your graph a &lt;- ggplot(data = l5_dataset, aes(x = f1_eyespots, y = f1_mates)) + geom_point(size=3, shape=17, colour=&quot;salmon&quot;, na.rm=TRUE) + geom_smooth(method=lm, se=TRUE, level=0.95, na.rm=TRUE) + labs(tag=&quot;A&quot;, x=&quot;Number of eyespots&quot;, y=&quot;Number of mates&quot;) + theme_light(base_size=12) #view your figure by running &#39;a&#39;: a This is what your final figure should look like, with your own custom colour and shape! 4.4 Plotting Figure 2 - Eyespots Increases Copulations NOTE: some of this code is only PARTIALLY written for you, refer to the steps above 4.4.1 STEP 3: We already imported the columns as vectors in Step 1, you do not need to do this again. Let’s generate a scatterplot called ‘b’, this time replace the ‘???’ with the correct arguments (refer to step 2 for help) NOTE: don’t forget to choose either the ‘theme_light’ or ‘theme_dark’ function b &lt;- ggplot(data = l5_dataset, aes(x =???, y =???)) + geom_point(size=3, shape=17, colour=&quot;???&quot;, na.rm=TRUE) + geom_smooth(method=lm, se=TRUE, level=0.95, na.rm=TRUE) + labs(tag=&quot;B&quot;, x=&quot;???&quot;, y=&quot;???&quot;) + theme_???(base_size=12) HINT: If you do not know what to label your x and y axis, refer to your metadata file view(l5_metadata) Remember to use the Export button above your figure to save as an image 4.5 Plotting Figure 3 - Eyespots Increases Copulations 4.5.1 STEP 4: Finally, let’s plot Figure 3 using ggplot2, we will call this figure ‘c’ First, let’s find the mean values for each treatment and create a data frame #define your mean for both the control and experimental variables control &lt;- mean(f3_cont, na.rm=TRUE) experimental &lt;- mean(f3_exp, na.rm=TRUE) #now create a value for your means mean &lt;- c(experimental, control) #then create a dataframe that has your mean values for both control and experimental df &lt;- data.frame(group = c(&quot;Experimental&quot;, &quot;Control&quot;), mean) Now that you have your data frame set up, let’s plot the mean and standard deviation (sd) for the treatment groups Like before, we will use ggplot() and specify we want to use the ‘df’ dataframe #&#39;mean&#39; will be the x variable, and &#39;group&#39; will be the y variable #use the &#39;geom_errorbarh()&#39; function to add horizontal error bars to the plot using sd of the means c &lt;- ggplot(data=df, aes(x = mean, y = group)) + geom_point(size = 4) + geom_errorbarh(aes(xmin = mean - sd(df$mean), xmax = mean + sd(df$mean)), height = 0.2) + labs(tag=&quot;C&quot;, x = &quot;Mean&quot;, y = &quot;&quot;) + theme_light() #in this case, group is a categorical variable with two levels: &quot;Experimental&quot; and &quot;Control&quot;. #it means that the points for the &quot;Experimental&quot; group will be grouped together on the top of the plot, and the points for the &quot;Control&quot; group will be grouped together on the bottom of the plot. #this makes it easy to see the difference between the means of the two groups. 4.5.2 STEP 5: Now let’s plot the 3 figures you made together using a package called patchwork First, install patchwork and load the library install.packages(&quot;patchwork&quot;) library(patchwork) Next, simply patch your plots ‘a’, ‘b’, and ‘c’ together using the ‘+’ symbol: a + b + c NOTE: Now that you have all your plots together, shift the size of the plotting window in the bottom right to change the layout of the plot so that you can see everything better. Then, save your plot as an image using the Export button. 4.5.3 STEP 6: Perform t.tests for control vs experimental data to determine if the means are significantly different between populations. NOTE: Refer to the metadata file to determine which datasets to compare. t.test(???, ???) To determine statistical significance, use the p-values you obtained from the t-tests. HINT: If the p-value is below 0.05, the datasets compared are significantly different. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
